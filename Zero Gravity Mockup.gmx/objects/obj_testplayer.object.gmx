<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass=20;
grapple=false;

hitbox_top = y + 50;
hitbox_bot = y - 50;
hitbox_right = x + 50;
hitbox_left = x - 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot_x=mouse_x-x;  //x between sprite and cursor
shoot_y=mouse_y-y;  // ditto for y
shoot_length=sqrt(sqr(shoot_x)+sqr(shoot_y))  //length of line from sprite to cursor
bullet=instance_create(x+43*(shoot_x/shoot_length),y+43*(shoot_y/shoot_length),obj_bullet);
bullet.direction=image_angle;
hspeed-=shoot_x/shoot_length*obj_bullet.speed*obj_bullet.mass/mass;
vspeed-=shoot_y/shoot_length*obj_bullet.speed*obj_bullet.mass/mass;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(x, hitbox_right, obj_vertWall)) or (place_meeting(x, hitbox_left, obj_vertWall))
{
hspeed=0;
}

if (place_meeting(hitbox_top, y, obj_horizWall)) or (place_meeting(hitbox_bot, y, obj_horizWall))
{
vspeed=0;
}

image_angle = point_direction(x, y, mouse_x, mouse_y)

if mouse_button= mb_left
{
if(alarm[0]==-1)alarm[0]=20;
}

if mouse_check_button_pressed(mb_right)
{
    if (place_meeting(x, hitbox_right, obj_vertWall)) or (place_meeting(x, hitbox_left, obj_vertWall)) or (place_meeting(hitbox_top, y, obj_horizWall)) or (place_meeting(hitbox_bot, y, obj_horizWall))
    {
        speed = 0;
    }
}

if mouse_check_button_released(mb_right)
{
    if (place_meeting(x, hitbox_right, obj_vertWall)) or (place_meeting(x, hitbox_left, obj_vertWall)) or (place_meeting(hitbox_top, y, obj_horizWall)) or (place_meeting(hitbox_bot, y, obj_horizWall))
    {
        direction=point_direction(x, y, mouse_x, mouse_y);
        speed = 10;
    }
}

if keyboard_check_pressed(vk_space) &amp;&amp; grapple==true
{
grapple=false;
}

if keyboard_check(vk_space) &amp;&amp; grapple=false
{
    if not speed==0 &amp;&amp; distance_to_object(obj_grapple)&lt;300 &amp;&amp; distance_to_object(obj_grapple)&gt;0
    {
        grapple=true;
        grapple_x=instance_nearest(x,y,obj_grapple).x;
        grapple_y=instance_nearest(x,y,obj_grapple).y;
        //grapple_length=distance_to_point(grapple_x,grapple_y);
    }    
}
if keyboard_check_released(vk_space) grapple=false;

if grapple==true
{
//current_angle=radtodeg(sin((grapple_x-x)/grapple_length));
//angle_step=grapple_length/speed;
//current_angle+=angle_step;
//x = grapple_x + lengthdir_x(grapple_length, current_angle);
//y = grapple_y + lengthdir_y(grapple_length, current_angle);
draw_line_width(x,y,grapple_x,grapple_y,10);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
