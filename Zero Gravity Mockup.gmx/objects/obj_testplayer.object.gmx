<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_square</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mass=20;
bullet_ready = 0;
grapple_shot=false;
grapple_hit=false;
bullet_offset = 43;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hitbox_top = y + 50;
hitbox_bot = y - 50;
hitbox_right = x + 50;
hitbox_left = x - 50;

if collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_vertWall, false, true) != noone
{
hspeed=0;
}

if collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_horizWall, false, true) != noone
{
vspeed=0;
}

image_angle = point_direction(x, y, mouse_x, mouse_y)

if mouse_button= mb_left
{
    bullet_ready += 1;
    // shoot(20, obj_bullet.speed, obj_bullet.mass);
    
    if bullet_ready == 20
    {
        shoot_x=mouse_x-x;  //x between sprite and cursor
        shoot_y=mouse_y-y;  // ditto for y
        shoot_length=distance_to_point(shoot_x, shoot_y);  //length of line from sprite to cursor
        bullet=instance_create(x+bullet_offset*(shoot_x/shoot_length),y+bullet_offset*(shoot_y/shoot_length),obj_bullet);
        bullet.direction=image_angle;
        hspeed-=shoot_x/shoot_length*obj_bullet.speed*obj_bullet.mass/mass;
        vspeed-=shoot_y/shoot_length*obj_bullet.speed*obj_bullet.mass/mass;
    
        bullet_ready = 0;
    }
}

if mouse_check_button_pressed(mb_right)
{
    if collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_vertWall, false, true) or collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_horizWall, false, true)
    {
        speed = 0;
    }
}

if mouse_check_button_released(mb_right)
{
    if collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_vertWall, false, true) or collision_rectangle(hitbox_left, hitbox_top, hitbox_right, hitbox_bot, obj_horizWall, false, true)
    {
        direction=point_direction(x, y, mouse_x, mouse_y);
        speed = 10;
    }
}

if keyboard_check_pressed(vk_space) &amp;&amp; grapple_shot==true
{
    grapple_shot = false;
    grapple_hit = false;
}

if keyboard_check_pressed(vk_space) &amp;&amp; grapple_shot == false
{
    nearest_grapple = instance_nearest(mouse_x, mouse_y, obj_grapple);
    shoot_x = nearest_grapple.x - x;
    shoot_y = nearest_grapple.y - y;
    shoot_length = distance_to_point(shoot_x, shoot_y);
    hook = instance_create(x+bullet_offset*(shoot_x/shoot_length), y+bullet_offset*(shoot_y/shoot_length), obj_grapplehook);
    obj_grapplehook.direction = point_direction(x, y, nearest_grapple.x, nearest_grapple.y);
    hspeed-=shoot_x/shoot_length*obj_grapplehook.speed*obj_grapplehook.mass/mass;
    vspeed-=shoot_y/shoot_length*obj_grapplehook.speed*obj_grapplehook.mass/mass;
    
    grapple_shot = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
